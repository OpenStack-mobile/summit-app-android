import groovy.json.JsonOutput
import groovy.json.JsonSlurper

def generateFireBaseJsonConfiguration(file) {
    println('loading file '+file+' ...')
    def projectDir   = project.rootDir.toString()
    println('project dir '+projectDir+' ...')
    def properties   = loadPropertiesFile(file)
    def templateFile = new File(projectDir + "/google-services.json.template")
    def json         = new JsonSlurper().parseText(templateFile.text)

    // populate properties
    json.project_info.project_number                            = properties['FirebaseProjectInfoNumber']
    json.project_info.firebase_url                              = properties['FirebaseProjectInfoUrl']
    json.project_info.project_id                                = properties['FirebaseProjectInfoId']
    json.project_info.storage_bucket                            = properties['FirebaseProjectInfoBucket']
    json.client[0].client_info.mobilesdk_app_id                 = properties['FirebaseClientInfoMobileSDKAppId']
    json.client[0].api_key[0].current_key                       = properties['FirebaseClientApiKeyCurrent']
    json.client[0].oauth_client[0].client_id                    = properties['FirebaseClientOAUTH2ClientClientId1']
    json.client[0].oauth_client[1].client_id                    = properties['FirebaseClientOAUTH2ClientClientId2']
    json.client[0].oauth_client[2].client_id                    = properties['FirebaseClientOAUTH2ClientClientId3']
    json.client[0].oauth_client[3].client_id                    = properties['FirebaseClientOAUTH2ClientClientId4']
    def jsonFile = new File(projectDir + "/app/google-services.json")
    jsonFile.write(JsonOutput.toJson(json))
}

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
    maven {
        url 'https://github.com/uPhyca/stetho-realm/raw/master/maven-repo'
    }
    flatDir {
        dirs 'libs'
    }
    google()
}

def loadPropertiesFile(properties_file){
    Properties props = new Properties()
    println 'loading properties file : '+ properties_file;
    props.load(new FileInputStream(file(properties_file)));
    return props;
}

def getPropertyFromFile(properties_file, key){
    Properties props = loadPropertiesFile(properties_file);
    return props[key]
}

def expandManifest(flavor, properties_file) {

    println 'expanding manifest for: ' + flavor
    Properties props = loadPropertiesFile(properties_file);

    return [
            googleMapApiKey: props['googleMapApiKey'],
            fabricApiKey: props['fabricApiKey'],
            parseApplicationId: props['parseApplicationId'],
            parseClientKey: props['parseClientKey'],
            ServiceClientId: props['ServiceClientId'],
            ServiceClientSecret: props['ServiceClientSecret'],
            NativeClientId: props['NativeClientId'],
            NativeClientSecret: props['NativeClientSecret'],
            NativeClientReturnUrl: props['NativeClientReturnUrl'],
            ResourceServerBaseUrl: props['ResourceServerBaseUrl'],
            IdentityProviderBaseUrl: props['IdentityProviderBaseUrl'],
            WebSiteBaseUrl: props['WebSiteBaseUrl'],
            YouTubeAndroidPlayerAPIKey: props['YouTubeAndroidPlayerAPIKey'],
            BasicAuthUser: props['BasicAuthUser'],
            BasicAuthPass: props['BasicAuthPass'],
    ]
}

task expandConfigurationRelease  {
    doLast {
        android.productFlavors.production {
            generateFireBaseJsonConfiguration("../summit-app.properties")
        }
    }
}

task expandConfigurationDebug {
    doLast {
        android.productFlavors.beta {
            generateFireBaseJsonConfiguration("../summit-app.staging.properties")
        }
        android.productFlavors.development {
            generateFireBaseJsonConfiguration("../summit-app.dev.properties")
        }
    }
}

tasks.whenTaskAdded { task ->
    if(task.name == 'processProductionReleaseManifest') {
        task.dependsOn expandConfigurationRelease
    }
    if(task.name == 'processBetaReleaseManifest') {
        task.dependsOn expandConfigurationDebug
    }
    if(task.name == 'processDevelopmentDebugManifest') {
        task.dependsOn expandConfigurationDebug
    }
}

android {
    flavorDimensions "default"

    dexOptions {
        javaMaxHeapSize "4g" //specify the heap size for the dex process
        preDexLibraries = false
    }
    compileSdkVersion 26
    defaultConfig {
        applicationId "org.openstack.android.summit"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 131
        versionName "2.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    buildTypes {
        debug {
            // Settings for Crashlytics Beta Distribution
            ext.betaDistributionReleaseNotes = "Release Notes for this build."
            ext.betaDistributionEmails = getPropertyFromFile("../summit-app.dev.properties", "BetaDistributionEmails")
            ext.enableCrashlytics = false
        }
        release {
            minifyEnabled true
            //debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        development {
            manifestPlaceholders = expandManifest("beta", "../summit-app.dev.properties")
            // applicationIdSuffix ".development"
        }
        beta {
            manifestPlaceholders = expandManifest("beta", "../summit-app.staging.properties")
            // applicationIdSuffix ".beta"
        }
        production {
            manifestPlaceholders = expandManifest("production", "../summit-app.properties")
        }
    }

    packagingOptions {
        pickFirst 'META-INF/license.txt'
        pickFirst 'META-INF/LICENSE.txt'
        pickFirst 'META-INF/NOTICE.txt'
        // to avoid error file included twice
        exclude 'META-INF/rxjava.properties'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    variantFilter { variant ->
        def names = variant.flavors*.name

        if (names.contains("development") && variant.buildType.name == "release") {
            variant.ignore = true
        }
        if (names.contains("production") && variant.buildType.name == "debug") {
            variant.ignore = true
        }
        if (names.contains("beta") && variant.buildType.name == "debug") {
            variant.ignore = true
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:design:26.1.0'
    implementation 'jp.wasabeef:recyclerview-animators:2.2.5'
    implementation 'net.danlew:android.joda:2.9.7'

    // Google's OAuth library for OpenID Connect
    // See https://code.google.com/p/google-oauth-java-client/wiki/Setup
    implementation('com.google.oauth-client:google-oauth-client:1.22.0') {
        exclude group: 'xpp3', module: 'xpp3'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        exclude group: 'junit', module: 'junit'
        exclude group: 'com.google.android', module: 'android'
    }

    implementation ('com.google.api-client:google-api-client-android:1.22.0'){
        exclude group: 'com.google.guava', module: 'guava-jdk5'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    // Google's JSON parsing, could be replaced with Jackson
    implementation ('com.google.api-client:google-api-client-gson:1.22.0'){
        exclude group: 'com.google.guava', module: 'guava-jdk5'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }

    implementation 'org.modelmapper:modelmapper:0.7.5'
    implementation 'com.github.OpenStack-mobile:Ranger:4692e18'
    // progress indicator
    implementation 'cc.cloudist.acplibrary:library:1.2.1'
    // image library
    implementation 'com.facebook.fresco:fresco:0.11.0'
    // simulate list with a linear layout
    implementation 'com.github.frankiesardo:linearlistview:1.0.1@aar'
    // page indicator
    implementation 'com.githang:viewpagerindicator:2.4.2@aar'
    // Tags
    implementation 'com.github.kaedea:Android-Cloud-TagView-Plus:5a49f4f'
    // google maps
    implementation 'com.google.android.gms:play-services-maps:15.0.0'
    // to get rid of UNEXPECTED TOP-LEVEL EXCEPTION: due oo many method references: (max is 65536)
    // https://github.com/BoltsFramework/Bolts-Android
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.parse.bolts:bolts-applinks:1.4.0'
    implementation files('libs/YouTubeAndroidPlayerApi.jar')
    // material design spiner
    implementation('com.weiwangcn.betterspinner:library-material:1.1.0') {
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }

    testImplementation 'org.mockito:mockito-core:2.0.86-beta'
    testImplementation 'junit:junit:4.12'
    testImplementation ('org.robolectric:robolectric:3.1'){
    }
    testImplementation 'org.powermock:powermock-module-junit4:1.6.5'
    testImplementation 'org.powermock:powermock-module-junit4-rule:1.6.5'
    testImplementation 'org.powermock:powermock-api-mockito:1.6.5'
    testImplementation 'org.powermock:powermock-classloading-xstream:1.6.5'

    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test:rules:1.0.1'
    androidTestImplementation 'com.android.support:support-annotations:27.1.1'

    if (file('libs/safe_storage.aar').exists()) {
        println('adding dependency safe_storage.aar ...')
        productionImplementation "org.openstack.android.summit.safestorage:safe_storage@aar"
    }
    if (file('libs/safe_storage-testing.aar').exists()) {
        println('adding dependency safe_storage-testing.aar ...')
        betaImplementation "org.openstack.android.summit.safestorage:safe_storage-testing@aar"
    }
    if (file('libs/safe_storage_debug.aar').exists()) {
        println('adding dependency safe_storage_debug.aar ...')
        developmentImplementation "org.openstack.android.summit.safestorage:safe_storage_debug@aar"
    }
    // http://facebook.github.io/stetho and https://github.com/uPhyca/stetho-realm
    implementation 'com.facebook.stetho:stetho:1.5.0'
    implementation 'com.uphyca:stetho_realm:2.0.0'

    // Espresso Dependencies
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test:rules:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    androidTestImplementation('com.android.support.test.espresso:espresso-contrib:2.2.2', {
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
        exclude module: 'recyclerview-v7'
        exclude module: 'design'
    })

    implementation 'com.google.firebase:firebase-core:15.0.2'
    implementation 'com.google.firebase:firebase-messaging:15.0.2'

    // https://github.com/square/retrofit
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'com.squareup.okhttp3:okhttp:3.9.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    // https://github.com/JakeWharton/butterknife
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    // https://github.com/ReactiveX/RxAndroid
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    implementation 'io.reactivex.rxjava2:rxjava:2.1.9'
    // https://github.com/google/dagger
    implementation 'com.google.dagger:dagger:2.14.1'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.14.1'

    implementation('com.crashlytics.sdk.android:crashlytics:2.9.1@aar') {
        transitive = true;
    }

    implementation 'com.firebase:firebase-jobdispatcher:0.8.5'
}

apply plugin: 'realm-android'

apply plugin: 'com.google.gms.google-services'
